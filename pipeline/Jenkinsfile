def COLOR_MAP = [
    'SUCCESS' : 'good',
    'FAILURE' : 'danger',
]

pipeline {
    environment {
        SONAR_AUTH_TOKEN = credentials('sonartoken') 
        scanerHome = tool 'SONAR6.2'
    }
    agent any
    tools {
        maven "MAVEN3.9"
        jdk "JDK17"
    }

    stages {
        stage('fetch code') {
            steps{
                git branch : 'atom', url : 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }
        stage('Build') {
            steps{
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo "Archiving artifact"
                    archiveArtifacts artifacts: '**/*.war' 
                }
            }
        }
        stage('Unit test') {
            steps{
                sh 'mvn test'
            }
        }
        stage('check style analysis') {
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
        } 
        stage('Sonar code Analysis') {
            steps {
                withSonarQubeEnv('sonarserver') {
                    sh '''${scanerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                        -Dsonar.projectKey=Vprofile \
                        -Dsonar.projectName=Vprofile \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_AUTH_TOKEN}'''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                // Wait for the SonarQube Quality Gate result
                script {
                    timeout(time: 10, unit: 'MINUTES') { // Wait up to 10 minutes for the Quality Gate result
                        def qg = waitForQualityGate() // Check the Quality Gate status
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to Quality Gate failure: ${qg.status}"
                        }
                    }
                }
                echo 'Quality Gate passed!'
            }
        }
        stage('Upload to Nexus') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3', // Use 'nexus2' for Nexus Repository Manager 2.x
                    protocol: 'http',     // Protocol for Nexus (http or https)
                    nexusUrl: '172.31.20.102:8081', // Nexus server URL (without /repository/)
                    groupId: 'QA', // Group ID of the artifact
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",      // Version of the artifact
                    repository: 'vprofile-repo', // Name of the Nexus repository
                    credentialsId: 'nexus-server', // Jenkins credentials ID for Nexus
                    artifacts: [
                        [
                            artifactId: 'vpro-app', // Artifact ID
                            type: 'war',          // Artifact type (e.g., jar, war, pom)
                            file: 'target/vprofile-v2.war' // Path to the artifact file
                        ]
                    ]
                )
            }
        }
    }

    post {
        always {
            slackSend (
                channel: '#cicd', // Slack channel
                color: COLOR_MAP[currentBuild.currentResult],
                message: """
                    :information_source: *Build Completed* :information_source:
                    Build Number: ${BUILD_NUMBER}
                    Details: ${BUILD_URL}
                """
            )
        }
    }
}